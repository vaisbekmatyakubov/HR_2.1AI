import streamlit as st
import google.generativeai as genai
import os
from dotenv import load_dotenv
import datetime
from docx import Document
from docx.shared import Pt
from docx.enum.text import WD_ALIGN_PARAGRAPH
import io

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ ---
if 'analysis_done' not in st.session_state:
    st.session_state.analysis_done = False # –§–ª–∞–≥: –±—ã–ª –ª–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω –∞–Ω–∞–ª–∏–∑
if 'gemini_results_dict' not in st.session_state:
    st.session_state.gemini_results_dict = {} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Gemini
if 'edited_results' not in st.session_state:
     st.session_state.edited_results = {} # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏, —á–∏—Ç–∞–µ–º –Ω–∞–ø—Ä—è–º—É—é)


# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini API ---
try:
    api_key = os.getenv("GEMINI_API_KEY")
    if not api_key:
        api_key = st.secrets["GEMINI_API_KEY"]

    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-1.5-flash-latest')
except Exception as e:
    st.error(f"–•–∞—Ç–æ–ª–∏–∫: Gemini API –∫–∞–ª–∏—Ç–∏–Ω–∏ —Å–æ–∑–ª–∞—à–¥–∞ –º—É–∞–º–º–æ. –ö–∞–ª–∏—Ç –º–∞–≤–∂—É–¥–ª–∏–≥–∏–Ω–∏ —Ç–µ–∫—à–∏—Ä–∏–Ω–≥. {e}")
    st.stop()

# --- –§—É–Ω–∫—Ü–∏–∏ (extract_komandirovka_info, parse_gemini_output, create_docx_report) ---
# –û–Ω–∏ –æ—Å—Ç–∞—é—Ç—Å—è —Ç–∞–∫–∏–º–∏ –∂–µ, –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ.
# –í–∞–∂–Ω–æ: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.
# –û—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ: –ø—Ä–æ–º–ø—Ç –≤ extract_komandirovka_info –≤—Å–µ –µ—â–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–ø—Ä–æ—Å—Ç–∏—Ç—å!

def extract_komandirovka_info(text):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ –ø—Ä–æ–º–ø—Ç –≤ Gemini."""
    # –í–ê–® –°–õ–û–ñ–ù–´–ô –ü–†–û–ú–ü–¢ –ó–î–ï–°–¨ (–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –£–ü–†–û–°–¢–ò–¢–¨)
    # extract_komandirovka_info —Ñ—É–Ω–∫—Ü–∏—è—Å–∏ –∏—á–∏–¥–∞–≥–∏ –ø—Ä–æ–º–ø—Ç–Ω–∏ —û–∑–≥–∞—Ä—Ç–∏—Ä–∏–Ω–≥:
    prompt = f"""
    –°–µ–Ω –é–∑–±–µ–∫ (–∫–∏—Ä–∏–ª–ª) —Ç–∏–ª–∏–¥–∞ —ë–∑–∏–ª–≥–∞–Ω –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ (—Ö–∏–∑–º–∞—Ç —Å–∞—Ñ–∞—Ä–∏) —Ç–∞–≤—Å–∏—Ñ–ª–∞—Ä–∏–¥–∞–Ω –∞–Ω–∏“õ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∞–∂—Ä–∞—Ç–∏–± –æ–ª–∏—à —É—á—É–Ω –º—û–ª–∂–∞–ª–ª–∞–Ω–≥–∞–Ω —ë—Ä–¥–∞–º—á–∏—Å–∞–Ω.

    “ö—É–π–∏–¥–∞–≥–∏ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ —Ç–∞–≤—Å–∏—Ñ–∏–¥–∞–Ω –∫–µ—Ä–∞–∫–ª–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∞–∂—Ä–∞—Ç–∏–± –æ–ª:

    "{text}"

    “ö—É–π–∏–¥–∞–≥–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞, “≥–∞—Ä –±–∏—Ä –º–∞—ä–ª—É–º–æ—Ç–Ω–∏ —è–Ω–≥–∏ “õ–∞—Ç–æ—Ä–¥–∞–Ω –±–æ—à–ª–∞–±, –∂–∞–≤–æ–± –±–µ—Ä:
    –ò—Å–º: [—Ç–æ–ø–∏–ª–≥–∞–Ω –∏—Å–º]
    –õ–∞–≤–æ–∑–∏–º: [—Ç–æ–ø–∏–ª–≥–∞–Ω –ª–∞–≤–æ–∑–∏–º]
    –ë–æ—à–ª–∞–Ω–∏—à —Å–∞–Ω–∞—Å–∏: [—Ç–æ–ø–∏–ª–≥–∞–Ω —Å–∞–Ω–∞]
    –ë—É–π—Ä—É–∫ —Å–∞–Ω–∞—Å–∏: [–∫–∞–π—Å–∏ —Å–∞–Ω–∞–¥–∞ —Ö–∏–∑–º–∞—Ç —Å–∞—Ñ–∞—Ä–∏–≥–∞ —á–∫–∏—à —É—á—É–Ω –±—É–π—Ä–∏–∫ –±–µ—Ä–∏–ª–≥–∞–Ω]
    –¢—É–≥–∞—à —Å–∞–Ω–∞—Å–∏: [—Ç–æ–ø–∏–ª–≥–∞–Ω —Å–∞–Ω–∞]
    –ñ–æ–π: [—Ç–æ–ø–∏–ª–≥–∞–Ω –∂–æ–π/—à–∞“≥–∞—Ä/–º–∞–Ω–∑–∏–ª]
    –ú–∞“õ—Å–∞–¥: [—Ç–æ–ø–∏–ª–≥–∞–Ω –º–∞“õ—Å–∞–¥]  # <--- –°–û–î–î–ê–õ–ê–®–¢–ò–†–ò–õ–î–ò!
    –ö—É–Ω–ª–∏–∫ “≤–∏—Å–æ–±–æ—Ç: [–∫—É–Ω–ª–∏–∫ “≥–∏—Å–æ–±–æ—Ç–Ω–∏ –π–æ–∑–∏ –±–µ—Ä –æ–∑–∏–Ω–≥ —Ç–æ–ª–∏–∫ —Ç–∞—Å–≤–∏—Ä–ª–∞–± –±–µ—Ä] # (–ë—É–Ω–∏ “≥–∞–º —Å–æ–¥–¥–∞–ª–∞—à—Ç–∏—Ä–∏—à –∫–µ—Ä–∞–∫)
    –°–∞—Ñ–∞—Ä –ù–∞—Ç–∏–∂–∞—Å–∏: [—Ç–æ–ø–∏–ª–≥–∞–Ω —Å–∞—Ñ–∞—Ä –Ω–∞—Ç–∏–∂–∞—Å–∏ –æ–∑–∏–Ω–≥ —Ç–æ–ª–∏–∫ —Ç–∞—Å–≤–∏—Ä–ª–∞–± –±–µ—Ä] # (–ë—É–Ω–∏ “≥–∞–º —Å–æ–¥–¥–∞–ª–∞—à—Ç–∏—Ä–∏—à –∫–µ—Ä–∞–∫)
    –•—É–ª–æ—Å–∞: [—Ç–æ–ø–∏–ª–≥–∞–Ω —Ö—É–ª–æ—Å–∞ —ë–∫–∏ –Ω–∞—Ç–∏–∂–∞–Ω–∏ –æ–∑–∏–Ω–≥ —Ç–æ–ª–∏–∫ —Ç–∞—Å–≤–∏—Ä–ª–∞–± –±–µ—Ä ] # (–ë—É–Ω–∏ “≥–∞–º —Å–æ–¥–¥–∞–ª–∞—à—Ç–∏—Ä–∏—à –∫–µ—Ä–∞–∫)
    –£–º—É–º–∏–π –∫—Å–∏–º: [–±–µ—Ä–∏–ª–≥–∞–Ω –ø—Ä–æ–º–ø–¥–∞–Ω –∫–µ–ª–∏–± —á–∏–∫–∏–º 1—á–∏ —à–∞—Ö–∏—Å —Ç–æ–º–æ–Ω–∏–¥–∞–Ω —Ç–æ–ª–∏–∫—Ä–æ–∫ –∫–∏–ª–∏–± —Ç–∞—Å–≤–∏—Ä–ª–∞–± –±–µ—Ä...] # (–ë—É–Ω–∏ “≥–∞–º —Å–æ–¥–¥–∞–ª–∞—à—Ç–∏—Ä–∏—à –∫–µ—Ä–∞–∫)

    –ê–≥–∞—Ä –±–∏—Ä–æ—Ä –º–∞—ä–ª—É–º–æ—Ç –º–∞—Ç–Ω–¥–∞ –º–∞–≤–∂—É–¥ –±—û–ª–º–∞—Å–∞ —ë–∫–∏ –∞–Ω–∏“õ –±—û–ª–º–∞—Å–∞, "–¢–æ–ø–∏–ª–º–∞–¥–∏" –¥–µ–± —ë–∑.
    –ñ–∞–≤–æ–±–Ω–∏ —Ñ–∞“õ–∞—Ç —û–∑–±–µ–∫ —Ç–∏–ª–∏–¥–∞, —é“õ–æ—Ä–∏–¥–∞–≥–∏ —Ñ–æ—Ä–º–∞—Ç–¥–∞ “õ–∞–π—Ç–∞—Ä. –ë–æ—à“õ–∞ “≥–µ—á “õ–∞–Ω–¥–∞–π “õ—û—à–∏–º—á–∞ –º–∞—Ç–Ω —ë–∑–º–∞.
    """
    # ... (—Ñ—É–Ω–∫—Ü–∏—è–Ω–∏–Ω–≥ “õ–æ–ª–≥–∞–Ω “õ–∏—Å–º–∏)


    try:
        response = model.generate_content(prompt)
        if response.parts:
            cleaned_response = response.text.strip().replace("```", "").strip()
            return cleaned_response
        else:
            try:
                feedback = response.prompt_feedback
                block_reason = feedback.block_reason if hasattr(feedback, 'block_reason') else '–ù–æ–º–∞—ä–ª—É–º —Å–∞–±–∞–±'
                return f"–•–∞—Ç–æ–ª–∏–∫: Gemini –∂–∞–≤–æ–± “õ–∞–π—Ç–∞—Ä–º–∞–¥–∏. –ë–ª–æ–∫–ª–∞—à —Å–∞–±–∞–±–∏: {block_reason}"
            except Exception:
                return "–•–∞—Ç–æ–ª–∏–∫: Gemini –¥–∞–Ω –±—û—à –∂–∞–≤–æ–± “õ–∞–π—Ç–¥–∏ (—ç“≥—Ç–∏–º–æ–ª —Ö–∞–≤—Ñ—Å–∏–∑–ª–∏–∫ —Ñ–∏–ª—å—Ç—Ä–∏)."
    except Exception as e:
        st.error(f"Gemini API –≥–∞ –º—É—Ä–æ–∂–∞–∞—Ç “õ–∏–ª–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {e}")
        return "–ú–∞—ä–ª—É–º–æ—Ç –æ–ª–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫ —é–∑ –±–µ—Ä–¥–∏."

def parse_gemini_output(gemini_text):
    """–†–∞–∑–±–∏—Ä–∞–µ—Ç –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç Gemini –Ω–∞ —Å–ª–æ–≤–∞—Ä—å."""
    data = {}
    if not gemini_text or not isinstance(gemini_text, str):
        return data
    lines = gemini_text.strip().split('\n')
    for line in lines:
        parts = line.split(':', 1)
        if len(parts) == 2:
            key = parts[0].strip()
            value = parts[1].strip()
            data[key] = value
    return data

def create_docx_report(gemini_data, manual_data):
    """–°–æ–∑–¥–∞–µ—Ç DOCX –¥–æ–∫—É–º–µ–Ω—Ç –≤ –ø–∞–º—è—Ç–∏."""
    document = Document()
    title = document.add_paragraph('–•–ò–ó–ú–ê–¢ –°–ê–§–ê–†–ò –ë–é–ô–ò–ß–ê –ú–ê–™–õ–£–ú–û–¢–õ–ê–†')
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
    for run in title.runs:
        run.font.size = Pt(14)
        run.bold = True
    document.add_paragraph()

    if manual_data.get("report_date"):
        p = document.add_paragraph()
        p.add_run('“≤–∏—Å–æ–±–æ—Ç –°–∞–Ω–∞—Å–∏: ').bold = True
        if isinstance(manual_data["report_date"], datetime.date):
             p.add_run(manual_data["report_date"].strftime('%Y-%m-%d'))
        else:
             p.add_run(str(manual_data["report_date"]))
    if manual_data.get("dept_head_name"):
        p = document.add_paragraph()
        p.add_run('–ë—û–ª–∏–º –±–æ—à–ª–∏“ì–∏ –ò—Å–º–∏ –§–∞–º–∏–ª–∏—è—Å–∏: ').bold = True
        p.add_run(manual_data["dept_head_name"])
    if manual_data.get("dept_head_position"):
        p = document.add_paragraph()
        p.add_run('–ë—û–ª–∏–º –±–æ—à–ª–∏“ì–∏ –õ–∞–≤–æ–∑–∏–º–∏: ').bold = True
        p.add_run(manual_data["dept_head_position"])
    document.add_paragraph()

    if gemini_data:
        p = document.add_paragraph()
        p.add_run('–•–∏–∑–º–∞—Ç —Å–∞—Ñ–∞—Ä–∏ —Ç–∞—Ñ—Å–∏–ª–æ—Ç–ª–∞—Ä–∏:').bold = True # –£–±—Ä–∞–ª–∏ (AI)
        document.add_paragraph()
        for key, value in gemini_data.items():
            p = document.add_paragraph()
            p.add_run(f"{key}: ").bold = True
            p.add_run(value)

    doc_buffer = io.BytesIO()
    document.save(doc_buffer)
    doc_buffer.seek(0)
    return doc_buffer

# --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
st.set_page_config(page_title="–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ –¢–∞“≥–ª–∏–ª–∏", layout="wide")

st.title("üìÑ –î–û–ö")
st.markdown("–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ (—Ö–∏–∑–º–∞—Ç —Å–∞—Ñ–∞—Ä–∏) “≥–∞“õ–∏–¥–∞–≥–∏ –º–∞—Ç–Ω–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥ –≤–∞ –∫–µ—Ä–∞–∫–ª–∏ –º–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä–Ω–∏ –∞–∂—Ä–∞—Ç–∏–± –æ–ª–∏–Ω–≥.")

# --- –ë–ª–æ–∫ –≤–≤–æ–¥–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö ---
st.divider()
st.subheader("“ö—û—à–∏–º—á–∞ –ú–∞—ä–ª—É–º–æ—Ç–ª–∞—Ä (–§–æ–π–¥–∞–ª–∞–Ω—É–≤—á–∏ —Ç–æ–º–æ–Ω–∏–¥–∞–Ω –∫–∏—Ä–∏—Ç–∏–ª–∞–¥–∏):")
# –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è –≤–∏–¥–∂–µ—Ç–æ–≤, —á—Ç–æ–±—ã –∏—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω—è–ª–æ—Å—å
dept_head_name = st.text_input("–ë—û–ª–∏–º –±–æ—à–ª–∏“ì–∏ –ò—Å–º–∏ –§–∞–º–∏–ª–∏—è—Å–∏:", key="dept_head_name_input")
dept_head_position = st.text_input("–ë—û–ª–∏–º –±–æ—à–ª–∏“ì–∏ –õ–∞–≤–æ–∑–∏–º–∏:", key="dept_head_position_input")
report_date = st.date_input("“≤–∏—Å–æ–±–æ—Ç –°–∞–Ω–∞—Å–∏:", value=datetime.date.today(), key="report_date_input")
st.divider()
# --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ---

# –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∏
user_input = st.text_area("–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ —Ç–∞–≤—Å–∏—Ñ–∏–Ω–∏ —à—É –µ—Ä–≥–∞ –∫–∏—Ä–∏—Ç–∏–Ω–≥:", height=150, placeholder="–ú–∏—Å–æ–ª: ...") # –£–º–µ–Ω—å—à–∏–ª –≤—ã—Å–æ—Ç—É

# –ö–Ω–æ–ø–∫–∞ "–ê–Ω–∞–ª–∏–∑ “õ–∏–ª–∏—à"
if st.button("üîç –¢–∞“≥–ª–∏–ª “õ–∏–ª–∏—à", key="analyze_button"):
    if user_input:
        with st.spinner('Gemini —Ñ–∏–∫—Ä–ª–∞—è–ø—Ç–∏... –ò–ª—Ç–∏–º–æ—Å, –∫—É—Ç–∏–Ω–≥...'):
            extracted_data_str = extract_komandirovka_info(user_input)
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
            st.session_state.gemini_results_dict = parse_gemini_output(extracted_data_str)
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –∞–Ω–∞–ª–∏–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω
            st.session_state.analysis_done = True
    else:
        st.warning("–ò–ª—Ç–∏–º–æ—Å, —Ç–∞“≥–ª–∏–ª “õ–∏–ª–∏—à —É—á—É–Ω –∫–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞ —Ç–∞–≤—Å–∏—Ñ–∏–Ω–∏ –∫–∏—Ä–∏—Ç–∏–Ω–≥.")
        st.session_state.analysis_done = False # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç–∞ –Ω–µ—Ç
        st.session_state.gemini_results_dict = {} # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

# --- –ë–ª–æ–∫ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ Gemini ---
# –≠—Ç–æ—Ç –±–ª–æ–∫ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¢–û–õ–¨–ö–û –ü–û–°–õ–ï —É—Å–ø–µ—à–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
if st.session_state.get('analysis_done', False):
    st.divider()
    st.subheader("–¢–∞“≥—Ä–∏—Ä–ª–∞—à —É—á—É–Ω –º–∞–π–¥–æ–Ω–ª–∞—Ä (Gemini –Ω–∞—Ç–∏–∂–∞–ª–∞—Ä–∏):")

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¢–ï–ö–£–©–ò–• –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    current_edited_values = {}
    # –ü–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª–∏–Ω–Ω—ã–º–∏
    long_text_keys = ["–ú–∞“õ—Å–∞–¥", "–°–∞—Ñ–∞—Ä –ù–∞—Ç–∏–∂–∞—Å–∏", "–•—É–ª–æ—Å–∞", "–£–º—É–º–∏–π –∫—Å–∏–º"]

    # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    for key, value in st.session_state.gemini_results_dict.items():
        field_key = f"edit_{key}" # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
        if key in long_text_keys:
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º text_area –¥–ª—è –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –¥–ª–∏–Ω–Ω—ã—Ö –ø–æ–ª–µ–π
             current_value = st.text_area(f"**{key}:**", value=value, key=field_key, height=100)
        else:
             # –ò—Å–ø–æ–ª—å–∑—É–µ–º text_input –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
             current_value = st.text_input(f"**{key}:**", value=value, key=field_key)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –≤–∏–¥–∂–µ—Ç–∞
        current_edited_values[key] = current_value

    st.divider()

    # –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏ –°–æ–∑–¥–∞—Ç—å DOCX"
    if st.button("‚úÖ –¢–∞—Å–¥–∏“õ–ª–∞—à –≤–∞ DOCX —è—Ä–∞—Ç–∏—à", key="confirm_button"):
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –≤—Ä—É—á–Ω—É—é (—á–∏—Ç–∞–µ–º –∏—Ö —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ)
        manual_data_dict = {
            "report_date": report_date, # –ë–µ—Ä–µ—Ç—Å—è –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ –≤—ã—à–µ
            "dept_head_name": dept_head_name, # –ë–µ—Ä–µ—Ç—Å—è –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ –≤—ã—à–µ
            "dept_head_position": dept_head_position # –ë–µ—Ä–µ—Ç—Å—è –∏–∑ –≤–∏–¥–∂–µ—Ç–∞ –≤—ã—à–µ
        }

        # –°–æ–∑–¥–∞–µ–º DOCX —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç–∏ —Å –¢–ï–ö–£–©–ò–ú–ò (–æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏) –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
        try:
            # –ü–µ—Ä–µ–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å —Å —Ç–µ–∫—É—â–∏–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ –ø–æ–ª–µ–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            docx_buffer = create_docx_report(current_edited_values, manual_data_dict)

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            st.download_button(
                label="üìÑ DOCX —Ñ–∞–π–ª–Ω–∏ —é–∫–ª–∞–± –æ–ª–∏—à",
                data=docx_buffer,
                file_name="komandirovka_hisoboti.docx",
                mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                key="download_button" # –î–æ–±–∞–≤–∏–ª–∏ –∫–ª—é—á –∫–Ω–æ–ø–∫–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
            )
            st.success("DOCX —Ñ–∞–π–ª —Ç–∞–π—ë—Ä!")
        except Exception as docx_e:
             st.error(f"DOCX —Ñ–∞–π–ª–∏–Ω–∏ —è—Ä–∞—Ç–∏—à–¥–∞ —Ö–∞—Ç–æ–ª–∏–∫: {docx_e}")


st.markdown("---")
st.caption("Powered by Google Gemini & Vaisbek Matyakubov")